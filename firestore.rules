rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Safely gets a user's role, checking for document existence.
    function getUserRole(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.exists ? userDoc.data.role : null;
    }

    // Checks if the requesting user is an admin.
    function isAdmin() {
      return request.auth != null && getUserRole(request.auth.uid) == 'admin';
    }

    // Checks if the requesting user is the owner of a document.
    function isUser(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // --- Collections Rules ---

    // Users Collection
    match /users/{userId} {
      // Admins can read any user profile. Users can only read their own.
      allow read: if request.auth != null && (isUser(userId) || isAdmin());

      // Users can only update their own name, phone, and avatar. Role is immutable.
      allow update: if isUser(userId) &&
        request.resource.data.keys().hasOnly(['name', 'phone', 'avatar']) &&
        request.resource.data.role == resource.data.role;

      // Client-side creation and deletion is disabled. This must be handled by secure backend functions.
      allow create, delete: if false;
    }

    // Questions & Categories (Read-Only for all, Admin Write)
    match /questions/{questionId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /categories/{categoryId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // User-Specific Data (User can only access their own)
    match /userExamAttempts/{attemptId} {
        // A user can create, read, and update their own exam attempts.
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Admin-Only Collections
    match /adminTasks/{taskId} {
        allow read, write: if isAdmin();
    }

    match /emailCampaigns/{campaignId} {
        allow read, write: if isAdmin();
    }

    // TTS Cache (Public Read, Admin Write)
    match /ttsCache/{cacheId} {
        allow read: if true;
        // Writes are handled by secure backend functions using the Admin SDK, so client writes are disabled.
        allow write: if false;
    }
  }
}
